#文件的读写称为IO操作(input/output)
#文件读写操作流程python操作文件--->打开或新建文件--->读、写文件--->关闭资源

#从外到内存叫读
#从内存到外叫写

#内置函数open()创建文件对象
#语法规则：  file = open( filename [,mode,encoding] )
#  被创建的文件对象 = 创建文件对象的函数（要创建或打开的文件名[,打开模式默认为只读，默认文本文件中字符的编写格式为GBK]）


#简写：open(file, mode='r')
#完整的语法格式：open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
#file: 必需，文件路径（相对或者绝对路径）。
#mode: 可选，文件打开模式
#buffering: 设置缓冲
#encoding: 一般使用utf8
#errors: 报错级别
#newline: 区分换行符
#closefd: 传入的file参数类型
#opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。

#t	    文本模式 (默认)。

#x	    写模式，新建一个文件，如果该文件已存在则会报错。

#b	    二进制模式。

#+	    打开一个文件进行更新(可读可写)。

#U	    通用换行模式（不推荐）。

# r	    以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。

#rb	    以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。

#r+	    打开一个文件用于读写。文件指针将会放在文件的开头。

#rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。

#w	    打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。
#       如果该文件不存在，创建新文件。

#wb	    以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。
#       如果该文件不存在，创建新文件。一般用于非文本文件如图片等。

#w+	    打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。
#       如果该文件不存在，创建新文件。

#wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。
#       如果该文件不存在，创建新文件。一般用于非文本文件如图片等。

#a	    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。
#       也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。

#ab	    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。
#       也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。

#a+	    打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。
#       文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。

#ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。
#       如果该文件不存在，创建新文件用于读写。

file = open('E:/python/a.txt','r')
print(file.readline())                 #a.txt需要ANSI格式
file.close()

file = open('E:/python/b.txt','w')
file.write('Python')
file.close()

#按照文件中数据的组织形式，文件分为以下两类
#文本文件：存储的是普通的 “字符” 文本,默认为Unicode字符集，可以使用记事本打开
#二进制文件：把数据内容用‘字节’进行存储，必须使用专业的软件打开，举例：mp3音频文件 .jpg图片 .doc文档

src_file = open('E:/python/logo.png','rb')
target_file = open('E:/python/copylogo.png','wb')
target_file.write(src_file.read())
target_file.close()
src_file.close
